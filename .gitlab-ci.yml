
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.9

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POETRY_VIRTUALENVS_CREATE: "true"
  GITLAB: gitlab.devops.telekom.de
  POETRY_VIRTUALENVS_PATH: "$CI_PROJECT_DIR/.venv"
  key: "${CI_COMMIT_REF_SLUG}"
  DARWIN_AMD64_BINARY: "netplanner-darwin-amd64-${CI_COMMIT_TAG}"
  LINUX_AMD64_BINARY: "netplanner-linux-amd64-${CI_COMMIT_TAG}"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/netplanner/${CI_COMMIT_TAG}/"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .venv/

stages:
  - build
  - upload
  - dist

build:
  stage: build
  image: python:3.9
  before_script:
    - python -V  # Print out python version for debugging
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
    - poetry --version
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token ${CI_JOB_TOKEN}
  script:
    - poetry build
    - poetry run python -OO -m PyInstaller netplanner.spec
    # an alternative approach is to install and run:
    - pip install dist/*.whl
    # run the command here
    - netplanner --help
    - mkdir -p bin/
    - cp dist/netplanner "bin/${LINUX_AMD64_BINARY}"
  artifacts:
    paths:
      - bin/*
      - dist/*.whl
      - dist/*.tar.gz

upload:
  stage: upload
  image: curlimages/curl:latest
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file bin/${LINUX_AMD64_BINARY} ${PACKAGE_REGISTRY_URL}
  only:
    - tags

dist:
  stage: dist
  image: python:3.9
  before_script:
    - python -V  # Print out python version for debugging
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
    - poetry --version
    - poetry config repositories.gitlab ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
    - poetry config http-basic.gitlab gitlab-ci-token ${CI_JOB_TOKEN}
  script:
    - poetry build
    - poetry publish -r gitlab
  only:
    - tags
    
release:
  stage: dist
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - |
      echo "Release: $CI_COMMIT_TAG"
  release:
    tag_name: $CI_COMMIT_TAG
    description: "Release: $CI_COMMIT_TAG"
    assets:
      links:
        - name: "${LINUX_AMD64_BINARY}"
          url: "${PACKAGE_REGISTRY_URL}${LINUX_AMD64_BINARY}"
  only:
    - tags
